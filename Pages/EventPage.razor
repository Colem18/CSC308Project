@using Radzen
@using Newtonsoft.Json;
@using Data;

@inject NavigationManager NavManager;
@inject Data.HttpRestService _httprestservice;
@inject Session _session;


@page "/eventpage"

<p><em>@loading</em></p>

<div class="flex-container">
    <h2 style="text-align: center;">Shari Vari</h2>
    <RadzenImage Path="https://i.imgur.com/ditrT1U.png" Class="float-left mr-3" Style="width: 50%; border-radius: 2%;" />
    <br />
    <hr />
    <br />
    <RadzenIcon Icon="schedule" />
    <p style="text-align:left;">00:00-6:00</p>
    <RadzenIcon Icon="place" />
    <p>Via de' Nari, 14, 00186 Roma RM</p>
    <p></p>
    <br />

    <h5>Description</h5>
    <p>
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec nec libero in ex auctor consequat et a turpis. Sed condimentum
        laoreet pulvinar. Morbi metus lorem, dignissim sit amet sodales cursus, ultricies ut libero. Maecenas porta egestas massa,
        accumsan interdum justo mollis et. Morbi tristique diam accumsan tincidunt porta. Proin ac lorem nisl. Donec fermentum sapien s
        ed mollis vehicula. Sed pretium vulputate est, at egestas libero efficitur a. Ut ornare, lacus sed congue egestas, enim ex dapibus
        nulla
    </p>
    <div class="button">
        <RadzenButton Click="newPage" Text="Buy Tickets" Size="ButtonSize.Large"
                      Style="display: flex; background-color: #066274; width: 250px; height: 50px; border-radius: 2%; font-size:large ; text-align:center; justify-content: center;" />

    </div>
    <div class="button">
        <RadzenButton Click="FavoriteEvent" Text="@Fav" Size="ButtonSize.Large"
                      Style="display: flex; background-color: #066274; width: 250px; height: 50px; border-radius: 2%; font-size: large; text-align: center; justify-content: center;" />
    </div>
</div>

@code {
    string loading = "Loading...";
    private List<Event> EventList = new List<Event>();
    public List<Event> Items = new List<Event>();
    public Event EventItem = new Event();
    public string Fav = "Favorite Event";
    protected override async Task OnInitializedAsync()
    {
        Task<List<Event>> LIST = GetEventsAsync();
        EventList = await LIST;
        loading = "Sucessfully Loaded";
        Console.WriteLine(EventItem.id);
        Console.WriteLine(EventItem.name);
        Console.WriteLine(EventItem.datetime);
        Console.WriteLine(EventItem.address);
        Console.WriteLine(EventItem.description);
        //await InvokeAsync(() => StateHasChanged());
    }
    public async Task<List<Event>> GetEventsAsync()
    {
        Uri uri = new Uri(string.Format("https://romaeventfunction.azurewebsites.net/api/event", string.Empty));
        //Console.WriteLine(uri);
        try
        {
            HttpResponseMessage response = await _httprestservice._client.GetAsync(uri);
            //Console.WriteLine(response.IsSuccessStatusCode);
            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                Console.WriteLine(content);
                //Items = JsonSerializer.Deserialize(content,_httprestservice._serializerOptions);
                Items = JsonConvert.DeserializeObject<List<Event>>(content);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(@"\tERROR {0}", ex.Message);
        }

        return Items;
    }
    private void newPage()
    {

    }
    private void FavoriteEvent()
    {
        if (Fav == "Favorite Event")
        {
            Fav = "Unfavorite Event";
        }
        else
        {
            Fav = "Favorite Event";
        }
    }
}

