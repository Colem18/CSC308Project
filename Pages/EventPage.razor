@using Radzen
@using Newtonsoft.Json;
@using System.Net.Http;
@using System.Text;
@using System;
@using eventsApp.Data;
@using System.Linq;

@inject NavigationManager NavManager;
@inject HttpRestService _httprestservice;
@inject Session _session;
@inject Account _account;

@page "/eventpage"

<p><em>@loading</em></p>

<div class="flex-container">
    <h2 style="text-align: center;">@EventCard.name</h2>
    <RadzenImage Path="@EventCard.url" Class="float-left mr-3" Style="width: 50%; border-radius: 2%;" />
    <br />
    <hr />
    <br />
    <RadzenIcon Icon="schedule" />
    <p style="text-align:left;">@EventCard.datetime</p>
    <RadzenIcon Icon="place" />
    <p>@EventCard.address</p>
    <p></p>
    <br />

    <h5>Description</h5>
    <p>
        @EventCard.description
    </p>
    <div class="button">
        <RadzenButton Click="newPage" Text="Buy Tickets" Size="ButtonSize.Large"
                      Style="display: flex; background-color: #066274; width: 250px; height: 50px; border-radius: 2%; font-size:large ; text-align:center; justify-content: center;" />

    </div>
    <div class="button">
        <RadzenButton Click="FavoriteEvent" Text="@Fav" Size="ButtonSize.Large"
                      Style="display: flex; background-color: #066274; width: 250px; height: 50px; border-radius: 2%; font-size: large; text-align: center; justify-content: center;" />
    </div>
</div>

@code {
    string loading = "Loading...";
    Account loggedIn;
    private Event EventCard = new Event();
    public List<Event> Items = new List<Event>();
    public Event EventItem = new Event();
    public string Fav = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        Task<Event> LIST = GetEventsAsync();
        EventCard = await LIST;
        loggedIn = _account;
        loading = "Sucessfully Loaded";
        Console.WriteLine(EventCard.id);
        Console.WriteLine(EventCard.name);
        Console.WriteLine(EventCard.datetime);
        Console.WriteLine(EventCard.address);
        Console.WriteLine(EventCard.description);
        String[] following_list = loggedIn.following_list;
        if (loggedIn.id == null)
        {
            Fav = "Login to Favorite";
        }
        else if (following_list.Contains(EventCard.id))
        {
            Fav = "Unfavorite Event";
        }
        else
        {
            Fav = "Favorite Event";
        }
        //await InvokeAsync(() => StateHasChanged());
    }
    public async Task<Event> GetEventsAsync()
    {
        Uri uri = new Uri(string.Format($"https://romaeventfunction.azurewebsites.net/api/event/{_session.id}", string.Empty));
        //Console.WriteLine(uri);
        try
        {
            HttpResponseMessage response = await _httprestservice._client.GetAsync(uri);
            //Console.WriteLine(response.IsSuccessStatusCode);
            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                Console.WriteLine(content);
                //Items = JsonSerializer.Deserialize(content,_httprestservice._serializerOptions);
                Items = JsonConvert.DeserializeObject<List<Event>>(content);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(@"\tERROR {0}", ex.Message);
        }
        EventItem = Items[0];
        return EventItem;
    }
    public async Task CreateAccountAsync(Account acc,string AccID, bool isNewItem = false)
    {
        Uri uri = new Uri(string.Format($"https://308projectlogin.azurewebsites.net/api/account/{AccID}", string.Empty));

        try
        {
            //string json = JsonSerialize.Serialize<TodoItem>(item, _serializerOptions);
            string json = JsonConvert.SerializeObject(acc, Formatting.Indented);
            Console.WriteLine(json);
            StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

            HttpResponseMessage response = null;
            if (isNewItem)
                response = await _httprestservice._client.PostAsync(uri, content);
            else
                response = await _httprestservice._client.PutAsync(uri, content);

            if (response.IsSuccessStatusCode)
                Console.WriteLine(@"\tAccount successfully saved.");
        }
        catch (Exception ex)
        {
            Console.WriteLine(@"\tERROR {0}", ex.Message);
        }
    }
    private void newPage()
    {

    }

    private async void FavoriteEvent()
    {
        String AccID = loggedIn.id;
        if (Fav == "Login to Favorite")
        {

        }
        else if (Fav == "Unfavorite Event")
        {
            loggedIn.following_list = loggedIn.following_list.Except(new string[] { EventItem.id }).ToArray();
            Task updateAccount = CreateAccountAsync(loggedIn, AccID);
            await updateAccount;
            Fav = "Favorite Event";
            await InvokeAsync(() => StateHasChanged());
        }
        else if (Fav == "Favorite Event")
        {
            loggedIn.following_list = loggedIn.following_list.Append(EventItem.id).ToArray();
            foreach (var item in loggedIn.following_list)
            {
                Console.Write("Value: ");
                Console.WriteLine(item);
            }
            Fav = "Favoriting...";
            Task updateAccount = CreateAccountAsync(loggedIn, AccID);
            await updateAccount;
            Fav = "Unfavorite Event";
            await InvokeAsync(() => StateHasChanged());
        }
        else
        {
            Fav = "Loading";
        }
    }
}

