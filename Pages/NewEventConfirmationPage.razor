@page "/newEventConfirmation"
@using Radzen;
@using Newtonsoft.Json;
@using System.Net.Http;
@using eventsApp.Data;
@using System.Text;
@using Microsoft.Maui.Graphics;

@inject NavigationManager NavManager
@inject HttpRestService _httprestservice;
@inject Session _session;
@inject Account _account;
@inject Event _event; 
<div class="flex-container">
    <h3>
        Event Successfully Proccessed
    </h3>
    @*<div style="width: 100%; display: flex; flex-direction: column; align-items: center">*@
    @if (Success)
    {
        @*<RadzenIcon Icon="check_circle_outline" IconStyle="IconStyle.Success" Style="height:350px; width:350px" />*@
        <img src="img/success.png" alt="createEvent_success" class="responsive">
        @*<RadzenImage Path="https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.istockphoto.com%2Fphotos%2Fcheck-mark-circle&psig=AOvVaw2xKvP-tYQVr1weFmQ84bU0&ust=1670414766818000&source=images&cd=vfe&ved=0CA8QjRxqFwoTCPD1_Yf65PsCFQAAAAAdAAAAABAE" class="responsive"></RadzenImage>*@
    }
    else if (Success = false)
    {
            //hard to test failure cause I dont know how to create a failed event :/
        @*<RadzenIcon Icon="highlight_off" IconStyle="IconStyle.Danger" Style="height:350px; width:350px" />*@
        <img src="img/failure.jpeg" alt="createEvent_failure" class="responsive">
    }

    @*<RadzenButton Style="background-color: #066274; width: 20%">
            Done
        </RadzenButton>*@
    @*</div>*@

    <div class="horizontalButtonDiv">
        @*<RadzenButton Click="@modifyPage" Style="background-color: #066274;">
                Modify
            </RadzenButton>*@
        <RadzenButton Click="@nextPage" Style="background-color: #066274; width: 50%">
            Home
        </RadzenButton>
    </div>

</div>


<style>
    .flex-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        padding-top: 5%;
        padding-left: 5%;
        padding-right: 5%;
        padding-bottom: 5%;
    }
    .responsive {
        width: 50%;
        height: auto;
    }
    .horizontalButtonDiv {
        display: flex;
        width: 50%;
        justify-content: space-around;
        padding-top: 5%;
    }
</style>



@code {
    bool Success;
    public class newEvent
    {
        public string name { get; set; }
        public string datetime { get; set; }
        public string address { get; set; }
        public string description { get; set; }
        public string url { get; set; }
        public int type { get; set; }
    }
    Event currentEvent;
    protected override async Task OnInitializedAsync()
    {
        newEvent currentEvent = new newEvent();
        currentEvent.name = _event.name;
        currentEvent.datetime = _event.datetime;
        currentEvent.address = _event.address;
        currentEvent.description = _event.description;
        currentEvent.url = _event.url;
        currentEvent.type = _event.type;
        Task newEvent = CreateEventAsync(currentEvent, true);
        await newEvent;
        Console.WriteLine(currentEvent.name);
        Console.WriteLine(currentEvent.type);
        Console.WriteLine(currentEvent.datetime);
        Console.WriteLine(currentEvent.description);
        Console.WriteLine(currentEvent.url);
    }
    public async Task CreateEventAsync(newEvent eve, bool isNewItem = false)
    {
        Uri uri = new Uri(string.Format("https://romaeventfunction.azurewebsites.net/api/event", string.Empty));

        try
        {
            //string json = JsonSerialize.Serialize<TodoItem>(item, _serializerOptions);
            string json = JsonConvert.SerializeObject(eve, Formatting.Indented);
            Console.WriteLine(json);
            StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

            HttpResponseMessage response = null;
            if (isNewItem)
                response = await _httprestservice._client.PostAsync(uri, content);
            else
                response = await _httprestservice._client.PutAsync(uri, content);

            if (response.IsSuccessStatusCode)
                Console.WriteLine(@"\tEvent successfully saved.");
                Success = true;
        }
        catch (Exception ex)
        {
            Success = false;
            Console.WriteLine(@"\tERROR {0}", ex.Message);
        }
    }
    private void nextPage()
    {
        NavManager.NavigateTo("/home");
    }
    private void modifyPage()
    {
        NavManager.NavigateTo("/modifyEventPage");
    }

}